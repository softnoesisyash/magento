require.config({"config": {
        "jsbuild":{"Magepow_Core/js/grid-slider.js":"/*\n* @Author: Alex Dong\n* @Date:   2020-07-29 13:21:07\n* @Last Modified by:   Alex Dong\n* @Last Modified time: 2022-07-18 18:29:19\n*/\n\ndefine([\n    'jquery',\n    'slick',\n    'jquery-ui-modules/core'\n    ], function ($, slick) {\n\t\t\"use strict\";\n        $.widget('magepow.gridSlider', {\n            options: {\n                selector: '.grid-slider',\n                useIntersectionObserver: true,\n                unobserve: true,\n            },\n\n            _create: function () {\n            \tvar options = this.options;\n            \tthis._initSlider();\n            },\n\n\t\t\t_uniqid: function (length=10) {\n\t            let result       \t   = '';\n\t            const characters \t   = 'abcdefghijklmnopqrstuvwxyz0123456789';\n\t            const charactersLength = characters.length;\n\t            for ( let i = 0; i < length; i++ ) {\n\t            \tresult += characters.charAt(Math.floor(Math.random() * charactersLength));\n\t           \t}\n\t           \treturn result;\n\t\t\t},\n\n            _initSlider: function () {\n                var options = this.options;\n                var useIntersectionObserver = options.useIntersectionObserver;\n                var unobserve = options.unobserve;\n                var self = this;\n                var $head = $('head');\n                var elements = options.selector ? self.element.find(options.selector) : self.element;\n                elements.each(function() {\n                    var element = $(this);\n                    var selector = 'grid-slider-' + self._uniqid();\n                    var styleId  = selector;\n                    element.addClass(selector);\n                    selector = '.' + selector;\n\t\t            if($('body').hasClass('rtl')){\n\t\t                element.attr('dir', 'rtl');\n\t\t                element.data( 'rtl', true );\n\t\t            }\n\t\t            var options = element.data();\n\t\t            if(iClass === undefined){\n\t\t                element.children().addClass('alo-item');\n\t\t                var iClass = '.alo-item';\n\t\t            }\n\t\t            var rows \t= ((options || {}).rows === void 0) ? 1 : options.rows;\n\t\t            var classes\t= rows ? selector + ' '+ iClass : selector + ' > '+ iClass;\n\t\t            var padding = options.padding;\n\t\t            var float  \t= $('body').hasClass('rtl') ? 'right' : 'left';\n\t\t            var style \t= (typeof padding !== 'undefined') ? classes + '{float: ' + float + '; padding: 0 '+padding+'px; box-sizing: border-box} ' + selector + '{margin: 0 -'+padding+'px}' : '';\n\t\t            $head.append('<style type=\"text/css\" >'+style+'</style>');\n\t\t            style \t\t= '';\n\t\t            if(options.slidesToShow){\n\t\t\t\t\t\tif (\"IntersectionObserver\" in window && useIntersectionObserver) {\n\t\t\t\t\t\t\tvar nthChild = options.slidesToShow + 1;\n\t\t\t\t\t\t\tstyle += selector + ' .item:nth-child(n+ ' + nthChild + ')' + '{display: none;} ' + selector +  ' .item{float:left};';\n\t\t\t\t\t\t\tlet gridSliderObserver = new IntersectionObserver(function(entries, observer) {\n\t\t\t\t\t\t\t\tentries.forEach(function(entry) {\n\t\t\t\t\t\t\t\t\tif (entry.isIntersecting) {\n\t\t\t\t\t\t\t\t\t\tlet el  = entry.target;\n\t\t\t\t\t\t\t\t\t\tvar $el = $(el);\n\t\t\t\t\t\t\t\t\t\t$el.on('init', function(){\n\t\t\t\t\t\t\t\t\t\t\t$head.find('#' + styleId).remove();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\tself.sliderRender($el);\n\t\t\t\t\t\t\t\t\t\tif(unobserve) gridSliderObserver.unobserve(el);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\telement.each(function(index, el){\n\t\t\t\t\t\t    \tgridSliderObserver.observe(el);\n\t\t\t\t\t\t    });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.sliderRender(element);\n\t\t\t\t\t\t}\n\t\t            }\n\t\t            var responsive \t= self.getPesponsive(options);\n\t\t\t\t\tif(responsive == undefined) return;\n\t\t\t\t\tvar length = Object.keys(responsive).length;\n\t\t\t\t\t$.each( responsive, function( key, value ) {\n\t\t\t\t\t\tvar col = 0;\n\t\t\t\t\t\tvar maxWith = 0;\n\t\t\t\t\t\tvar minWith = 0;\n\t\t\t\t\t\t$.each( value , function(size, num) { minWith = parseInt(size) + 1; col = num;});\n\t\t\t\t\t\tif(key+2<length){\n\t\t\t\t\t\t\t$.each( responsive[key+1], function( size, num) { maxWith = size; col = num;});\n\t\t\t\t\t\t\tstyle += ' @media (min-width: '+minWith+'px) and (max-width: '+maxWith+'px)';\n\t\t\t\t\t\t} else { \n\t\t\t\t\t\t\tif(key+2 == length) return; // don't use key = length - 1;\n\t\t\t\t\t\t\t$.each( responsive[key], function( size, num) { maxWith = size; col = num;});\n\t\t\t\t\t\t\tstyle += ' @media (min-width: '+maxWith+'px)';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstyle += ' {'+selector + '{margin: 0 -'+padding+'px}'+classes+'{padding: 0 '+padding+'px; box-sizing: border-box; width: calc(100% / ' + col + ')} '+classes+':nth-child('+col+'n+1){clear: ' + float + ';}}';\n\t\t\t\t\t});\t\n\t\t           \t$head.append('<style type=\"text/css\" id=\"' + styleId + '\" >'+style+'</style>');\n\n\t\t           \tself.element.addClass('grid-init');\n\t\t           \t\n                });\n            },\n\n            getPesponsive : function (options) {\n            \tif(!options.slidesToShow || !options.responsive) return options.responsive;\n\t\t\t\tvar responsive \t= options.responsive;\n\t\t\t\tvar length = Object.keys(responsive).length;\n\t\t\t\tvar gridResponsive = [];\n\t\t\t\t$.each( responsive, function( key, value ) { \n\t\t\t\t\tvar breakpoint = {};\n\t\t\t\t\tbreakpoint[value.breakpoint] = parseInt(value.settings.slidesToShow);\n\t\t\t\t\tgridResponsive.push(breakpoint);\n\t\t\t\t });\n\t\t\t\treturn gridResponsive.reverse();\n            },\n\n            sliderRender: function (el) {\n            \tif(el.hasClass('slick-initialized')){\n            \t\tel.slick(\"refresh\");\n            \t\treturn;\n            \t}\n            \tvar options = el.data();\n                var lazy  = el.find('img.lazyload');\n                if(lazy.length){\n                    lazy.each(function(index) {\n                        $(this).data('lazy', $(this).data('src'));\n                    });\n                }\n                el.on('init', function(event, slick){\n                \t$('body').trigger('contentUpdated'); // support lazyload\n                    var video = $(this).find('.external-video');\n                    video.on('click', function(event) {\n                        var $this = $(this);\n                        if($this.hasClass('embed')) return;\n                        var img = $this.find('img');\n                        event.preventDefault();\n                        var url = $(this).data('video');\n                        url = url.replace(\"://vimeo.com/\", \"://player.vimeo.com/video/\");\n                        url = url.replace(\"://www.youtube.com/watch?v=\", \"://youtube.com/embed/\");\n                        url = url + '?autoplay=1&badge=0';\n                        var iframe = '<iframe class=\"iframe-video\" src=\"' + url + '\" width=\"' + img.width() + '\" height=\"' + img.height()  + '\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>'; \n                        $this.append(iframe).addClass('embed');\n                        img.hide();\n                    });\n                });\n\n                var slider = el.slick(options);\n                el.on('beforeChange', function(event, slick, currentSlide, nextSlide){\n                    var video = $(this).find('.external-video');\n                    video.removeClass('embed').find('img').show();\n                    video.find('.iframe-video').remove();\n                });\n                slider.on( \"click\", \".item\", function() {\n                    el.slick('slickSetOption', \"autoplay\",false,false);\n                });\n            }\n\n        });\n\n    return $.magepow.gridSlider;\n\n});\n"}
}});
