require.config({"config": {
        "jsbuild":{"tiny_mce_5/jquery.tinymce.min.js":"/**\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n * Licensed under the LGPL or a commercial license.\n * For LGPL see License.txt in the project root for license information.\n * For commercial licenses see https://www.tiny.cloud/\n */\n/**\n * Jquery integration plugin.\n *\n * @class tinymce.core.JqueryIntegration\n * @private\n */\n!function(){function f(){\n// Reference to tinymce needs to be lazily evaluated since tinymce\n// might be loaded through the compressor or other means\nreturn d.tinymce}var p,c,u,s=[],d=\"undefined\"!=typeof global?global:window,m=d.jQuery;m.fn.tinymce=function(o){var e,t,i,n,l=this,r=\"\";\n// No match then just ignore the call\nreturn l.length?\n// Get editor instance\no?(l.css(\"visibility\",\"hidden\"),\n// Load TinyMCE on demand, if we need to\nd.tinymce||c||!(e=o.script_url)?\n// Delay the init call until tinymce is loaded\n1===c?s.push(a):a():(c=1,t=e.substring(0,e.lastIndexOf(\"/\")),\n// Check if it's a dev/src version they want to load then\n// make sure that all plugins, themes etc are loaded in source mode as well\n-1!=e.indexOf(\".min\")&&(r=\".min\"),\n// Setup tinyMCEPreInit object this will later be used by the TinyMCE\n// core script to locate other resources like CSS files, dialogs etc\n// You can also predefined a tinyMCEPreInit object and then it will use that instead\nd.tinymce=d.tinyMCEPreInit||{base:t,suffix:r},\n// url contains gzip then we assume it's a compressor\n-1!=e.indexOf(\"gzip\")&&(i=o.language||\"en\",e=e+(/\\?/.test(e)?\"&\":\"?\")+\"js=true&core=true&suffix=\"+escape(r)+\"&themes=\"+escape(o.theme||\"modern\")+\"&plugins=\"+escape(o.plugins||\"\")+\"&languages=\"+(i||\"\"),\n// Check if compressor script is already loaded otherwise setup a basic one\nd.tinyMCE_GZ||(d.tinyMCE_GZ={start:function(){function n(e){f().ScriptLoader.markDone(f().baseURI.toAbsolute(e))}\n// Add core languages\nn(\"langs/\"+i+\".js\"),\n// Add themes with languages\nn(\"themes/\"+o.theme+\"/theme\"+r+\".js\"),n(\"themes/\"+o.theme+\"/langs/\"+i+\".js\"),\n// Add plugins with languages\nm.each(o.plugins.split(\",\"),function(e,t){t&&(n(\"plugins/\"+t+\"/plugin\"+r+\".js\"),n(\"plugins/\"+t+\"/langs/\"+i+\".js\"))})},end:function(){}})),(n=document.createElement(\"script\")).type=\"text/javascript\",n.onload=n.onreadystatechange=function(e){e=e||window.event,2===c||\"load\"!=e.type&&!/complete|loaded/.test(n.readyState)||(f().dom.Event.domLoaded=1,c=2,\n// Execute callback after mainscript has been loaded and before the initialization occurs\no.script_loaded&&o.script_loaded(),a(),m.each(s,function(e,t){t()}))},n.src=e,document.body.appendChild(n)),l):f()?f().get(l[0].id):null:l;function a(){var a=[],c=0;\n// Apply patches to the jQuery object, only once\nu||(v(),u=!0),\n// Create an editor instance for each matched node\nl.each(function(e,t){var n,i=t.id,r=o.oninit;\n// Generate unique id for target element if needed\ni||(t.id=i=f().DOM.uniqueId()),\n// Only init the editor once\nf().get(i)||(\n// Create editor instance and render it\nn=f().createEditor(i,o),a.push(n),n.on(\"init\",function(){var e,t=r;l.css(\"visibility\",\"\"),\n// Run this if the oninit setting is defined\n// this logic will fire the oninit callback ones each\n// matched editor instance is initialized\nr&&++c==a.length&&(\"string\"==typeof t&&(e=-1===t.indexOf(\".\")?null:f().resolve(t.replace(/\\.\\w+$/,\"\")),t=f().resolve(t)),\n// Call the oninit function with the object\nt.apply(e||f(),a))}))}),\n// Render the editor instances in a separate loop since we\n// need to have the full editors array used in the onInit calls\nm.each(a,function(e,t){t.render()})}},\n// Add :tinymce pseudo selector this will select elements that has been converted into editor instances\n// it's now possible to use things like $('*:tinymce') to get all TinyMCE bound elements.\nm.extend(m.expr[\":\"],{tinymce:function(e){var t;return!!(e.id&&\"tinymce\"in d&&(t=f().get(e.id))&&t.editorManager===f())}});\n// This function patches internal jQuery functions so that if\n// you for example remove an div element containing an editor it's\n// automatically destroyed by the TinyMCE API\nvar v=function(){function r(e){\n// If the function is remove\n\"remove\"===e&&this.each(function(e,t){var n=u(t);n&&n.remove()}),this.find(\"span.mceEditor,div.mceEditor\").each(function(e,t){var n=f().get(t.id.replace(/_parent$/,\"\"));n&&n.remove()})}function o(i){var e,t=this;\n// Handle set value\n/*jshint eqnull:true */if(null!=i)r.call(t),\n// Saves the contents before get/set value of textarea/div\nt.each(function(e,t){var n;(n=f().get(t.id))&&n.setContent(i)});else if(0<t.length&&(e=f().get(t[0].id)))return e.getContent()}function l(e){return e&&e.length&&d.tinymce&&e.is(\":tinymce\")}\n// Removes any child editor instances by looking for editor wrapper elements\nvar u=function(e){var t=null;return e&&e.id&&d.tinymce?f().get(e.id):t},s={};\n// Loads or saves contents from/to textarea if the value\n// argument is defined it will set the TinyMCE internal contents\n// Patch some setter/getter functions these will\n// now be able to set/get the contents of editor instances for\n// example $('#editorid').html('Content'); will update the TinyMCE iframe instance\nm.each([\"text\",\"html\",\"val\"],function(e,t){var a=s[t]=m.fn[t],c=\"text\"===t;m.fn[t]=function(e){var t=this;if(!l(t))return a.apply(t,arguments);if(e!==p)return o.call(t.filter(\":tinymce\"),e),a.apply(t.not(\":tinymce\"),arguments),t;// return original set for chaining\nvar i=\"\",r=arguments;return(c?t:t.eq(0)).each(function(e,t){var n=u(t);i+=n?c?n.getContent().replace(/<(?:\"[^\"]*\"|'[^']*'|[^'\">])*>/g,\"\"):n.getContent({save:!0}):a.apply(m(t),r)}),i}}),\n// Makes it possible to use $('#id').append(\"content\"); to append contents to the TinyMCE editor iframe\nm.each([\"append\",\"prepend\"],function(e,t){var n=s[t]=m.fn[t],r=\"prepend\"===t;m.fn[t]=function(i){var e=this;return l(e)?i!==p?(\"string\"==typeof i&&e.filter(\":tinymce\").each(function(e,t){var n=u(t);n&&n.setContent(r?i+n.getContent():n.getContent()+i)}),n.apply(e.not(\":tinymce\"),arguments),e):void 0:n.apply(e,arguments)}}),\n// Makes sure that the editor instance gets properly destroyed when the parent element is removed\nm.each([\"remove\",\"replaceWith\",\"replaceAll\",\"empty\"],function(e,t){var n=s[t]=m.fn[t];m.fn[t]=function(){return r.call(this,t),n.apply(this,arguments)}}),s.attr=m.fn.attr,\n// Makes sure that $('#tinymce_id').attr('value') gets the editors current HTML contents\nm.fn.attr=function(e,t){var n=this,i=arguments;if(!e||\"value\"!==e||!l(n))return s.attr.apply(n,i);if(t!==p)return o.call(n.filter(\":tinymce\"),t),s.attr.apply(n.not(\":tinymce\"),i),n;// return original set for chaining\nvar r=n[0],a=u(r);return a?a.getContent({save:!0}):s.attr.apply(m(r),i)}}}();"}
}});
